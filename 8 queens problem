# Function to check if a queen can be placed on board[row][col]
def is_safe(board, row, col):
    # Check this column on the left side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check the upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check the lower diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 1:
            return False

    return True

# Function to solve the 8-Queens problem using backtracking
def solve_n_queens(board, row):
    # Base case: If all queens are placed, return True
    if row >= len(board):
        return True

    # Consider this row and try placing a queen in all columns one by one
    for col in range(len(board)):
        if is_safe(board, row, col):
            # Place the queen on board[row][col]
            board[row][col] = 1

            # Recur to place the rest of the queens
            if solve_n_queens(board, row + 1):
                return True

            # If placing the queen here doesn't lead to a solution, backtrack
            board[row][col] = 0

    # If the queen cannot be placed in any column in this row, return False
    return False

# Function to print the board
def print_board(board):
    for row in board:
        print(" ".join("Q" if x == 1 else "." for x in row))
    print("\n")

# Driver code to solve the 8-Queens problem
N = 8  # Size of the board (8x8)
board = [[0 for _ in range(N)] for _ in range(N)]

if solve_n_queens(board, 0):
    print("Solution found:")
    print_board(board)
else:
    print("No solution exists")
