from collections import deque

# Function to check if a state is valid
def is_valid(state):
    m1, c1, b1, m2, c2, b2 = state
    # Check for the rule: cannibals should not outnumber missionaries on either side
    if (m1 > 0 and c1 > m1) or (m2 > 0 and c2 > m2):
        return False
    return True

# Function to generate all possible next states
def get_next_states(state):
    m1, c1, b1, m2, c2, b2 = state
    next_states = []
    
    # Possible moves
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    
    # Boat is on the first side
    if b1 == 1:
        for m, c in moves:
            new_state = (m1 - m, c1 - c, 0, m2 + m, c2 + c, 1)
            if new_state[0] >= 0 and new_state[1] >= 0 and is_valid(new_state):
                next_states.append(new_state)
    
    # Boat is on the other side
    else:
        for m, c in moves:
            new_state = (m1 + m, c1 + c, 1, m2 - m, c2 - c, 0)
            if new_state[3] >= 0 and new_state[4] >= 0 and is_valid(new_state):
                next_states.append(new_state)
    
    return next_states

# Function to solve the Missionaries and Cannibals problem using BFS
def solve_missionaries_cannibals():
    # Initial state: (3 missionaries, 3 cannibals, boat on the start side, 0 missionaries, 0 cannibals, boat on the other side)
    start_state = (3, 3, 1, 0, 0, 0)
    
    # Goal state: (0 missionaries, 0 cannibals, boat on the other side, 3 missionaries, 3 cannibals, boat on the start side)
    goal_state = (0, 0, 0, 3, 3, 1)
    
    # Queue for BFS (state, path taken)
    queue = deque([(start_state, [])])
    
    # Set to keep track of visited states
    visited = set()
    visited.add(start_state)
    
    # BFS loop
    while queue:
        current_state, path = queue.popleft()
        
        # If the goal state is reached, return the solution path
        if current_state == goal_state:
            return path + [current_state]
        
        # Generate all possible next states
        for next_state in get_next_states(current_state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [current_state]))
    
    return None

# Function to print the solution path
def print_solution_path(path):
    for i, state in enumerate(path):
        m1, c1, b1, m2, c2, b2 = state
        boat_position = "start" if b1 == 1 else "goal"
        print(f"Step {i}: {m1} missionaries, {c1} cannibals on the start side | {m2} missionaries, {c2} cannibals on the goal side | Boat at {boat_position}")

# Solve the problem
solution = solve_missionaries_cannibals()

if solution:
    print("Solution found!")
    print_solution_path(solution)
else:
    print("No solution found.")
